# let & const

- 이전에 우리가 사용했던 것은 var이였다.

- var는 별 문제가 없을 수 있지만, 큰 어플리케이션을 만들 때에는 문제가 있다.
=> 덮어 쓰거나 할때 값이 바뀌는데 이것을 허용하지 않을 경우도 항상 존재할것이다.

- var은 절대 쓰지마라..

* const
-  바뀌지 않도록 해주는 것이 바로 const이다.
=> 변수를 read-only로 만들어 준다.
=> 하지만 항상 쓰기가 불가능 한것은 아닌데, 한 예로 Object안의 Value값 변화이다.

- 값을 overwrite할 일이 없는한 기본적으로는 const를 사용하는 습관이 중요하다.

* let
- 이전의 var 같은 성질이 있지만, 다른점은 변수 재선언이 불가능하다는 것이다.



# dead zone

- temporal dead zone 

- JS는 위에서 아래로 코드를 실행된다.

- JS는 hoisting 이라는 것을 해준다.
=> hoisting : 자바스크립트가 프로그램을 실행하기 전에, 
                  선언된 변수들을 모두 top으로 이동시킨다.

- 하지만 let을 사용한다면 hoisting이 되지 않는데, 이런 것을 통틀어 temporal dead zone이라고 부른다.



# block scope

- scope (=bubble)
=> 이 버블이 variable들이 접근가능한지 아닌지 감지해줌

- block scope (let, const)
=> 모든 블럭내에 변수 선언시 그 블럭 밖에서는 사용 불가능

- function scope (var)
=> 함수 블럭내에서 변수 선언시 그 블럭 밖에서는 사용 불가능



# the future of 'var'

- 과연 var는 미래가 없는것인가?
=> 절대 사용하지 마라

- 그럼에도 계속해서 var가 쓰이는 이유는? var를 바꾸면 되는데 왜 let, const를 만들었지?
=> var를 막거나 변경하면 모든 웹사이트들이 망가질 것이기 때문에...



































